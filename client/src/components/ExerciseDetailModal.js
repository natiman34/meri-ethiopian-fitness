import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { X, Volume2, VolumeX, Target, Clock, Dumbbell, AlertTriangle, Lightbulb, Users } from 'lucide-react';
import AnimatedGif from './AnimatedGif';
const ExerciseDetailModal = ({ exercise, isOpen, onClose }) => {
    const [isPlaying, setIsPlaying] = useState(false);
    const [isMuted, setIsMuted] = useState(false);
    const [activeTab, setActiveTab] = useState('overview');
    const [videoError, setVideoError] = useState(false);
    if (!isOpen || !exercise)
        return null;
    const getDifficultyColor = (difficulty) => {
        switch (difficulty) {
            case 'beginner': return 'bg-green-100 text-green-800';
            case 'intermediate': return 'bg-yellow-100 text-yellow-800';
            case 'advanced': return 'bg-red-100 text-red-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };
    const getCategoryColor = (category) => {
        switch (category) {
            case 'strength': return 'bg-blue-100 text-blue-800';
            case 'cardio': return 'bg-red-100 text-red-800';
            case 'flexibility': return 'bg-purple-100 text-purple-800';
            case 'balance': return 'bg-indigo-100 text-indigo-800';
            case 'plyometric': return 'bg-orange-100 text-orange-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };
    const getMuscleGroupColor = (muscleGroup) => {
        switch (muscleGroup) {
            case 'chest': return 'bg-red-100 text-red-800';
            case 'back': return 'bg-blue-100 text-blue-800';
            case 'legs': return 'bg-green-100 text-green-800';
            case 'shoulders': return 'bg-purple-100 text-purple-800';
            case 'arms': return 'bg-orange-100 text-orange-800';
            case 'abs': return 'bg-yellow-100 text-yellow-800';
            case 'glutes': return 'bg-pink-100 text-pink-800';
            case 'full-body': return 'bg-gray-100 text-gray-800';
            default: return 'bg-gray-100 text-gray-800';
        }
    };
    return (_jsx("div", { className: "fixed inset-0 z-50 overflow-y-auto", role: "dialog", "aria-modal": "true", "aria-labelledby": "exercise-modal-title", children: _jsxs("div", { className: "flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0", children: [_jsx("div", { className: "fixed inset-0 bg-black bg-opacity-75 transition-opacity", onClick: onClose, "aria-hidden": "true" }), _jsxs("div", { className: "inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full", role: "document", children: [_jsx("div", { className: "bg-gray-50 px-6 py-4 border-b border-gray-200", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("span", { className: `px-3 py-1 rounded-full text-sm font-semibold ${getDifficultyColor(exercise.difficulty)}`, children: exercise.difficulty }), _jsx("span", { className: `px-3 py-1 rounded-full text-sm font-semibold ${getCategoryColor(exercise.category)}`, children: exercise.category }), _jsx("span", { className: `px-3 py-1 rounded-full text-sm font-semibold ${getMuscleGroupColor(exercise.muscleGroup)}`, children: exercise.muscleGroup })] }), _jsx("button", { onClick: onClose, className: "text-gray-400 hover:text-gray-600 transition-colors", "aria-label": "Close exercise details", children: _jsx(X, { className: "h-6 w-6" }) })] }) }), _jsxs("div", { className: "max-h-[80vh] overflow-y-auto", children: [_jsxs("div", { className: "relative h-80 bg-gray-100", children: [exercise.gifUrl ? (_jsx(AnimatedGif, { src: exercise.gifUrl, alt: exercise.name, staticImageSrc: exercise.image, className: "w-full h-full" })) : exercise.videoUrl ? (_jsx("video", { src: exercise.videoUrl, className: "w-full h-full object-cover", controls: true, muted: isMuted, onPlay: () => setIsPlaying(true), onPause: () => setIsPlaying(false), onError: () => {
                                                // If video fails, show the static image
                                                setVideoError(true);
                                            } })) : (_jsx("div", { className: "w-full h-full flex items-center justify-center", children: _jsx("img", { src: exercise.image, alt: exercise.name, className: "w-full h-full object-cover" }) })), videoError && (_jsxs("div", { className: "absolute inset-0 bg-gray-100 flex items-center justify-center", children: [_jsx("img", { src: exercise.image, alt: exercise.name, className: "w-full h-full object-cover" }), _jsx("div", { className: "absolute bottom-0 left-0 right-0 bg-black/70 text-white p-2 text-sm text-center", children: "Video unavailable. Showing static image." })] })), exercise.videoUrl && (_jsx("div", { className: "absolute bottom-4 right-4 flex space-x-2", children: _jsx("button", { onClick: () => setIsMuted(!isMuted), className: "bg-black/50 text-white p-2 rounded-full hover:bg-black/70 transition-colors", children: isMuted ? _jsx(VolumeX, { className: "h-4 w-4" }) : _jsx(Volume2, { className: "h-4 w-4" }) }) }))] }), _jsxs("div", { className: "p-6", children: [_jsx("h2", { id: "exercise-modal-title", className: "text-2xl font-bold text-gray-900 mb-2", children: exercise.name }), _jsx("p", { className: "text-gray-600 mb-6", children: exercise.description }), _jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 gap-4 mb-6", children: [_jsxs("div", { className: "bg-gray-50 rounded-lg p-3 text-center", children: [_jsx(Clock, { className: "h-6 w-6 text-green-600 mx-auto mb-1" }), _jsx("div", { className: "text-sm text-gray-600", children: "Duration" }), _jsxs("div", { className: "font-semibold", children: [exercise.estimatedTime, " min"] })] }), exercise.caloriesBurn && (_jsxs("div", { className: "bg-gray-50 rounded-lg p-3 text-center", children: [_jsx(Target, { className: "h-6 w-6 text-red-600 mx-auto mb-1" }), _jsx("div", { className: "text-sm text-gray-600", children: "Calories" }), _jsxs("div", { className: "font-semibold", children: [exercise.caloriesBurn, " cal"] })] })), _jsxs("div", { className: "bg-gray-50 rounded-lg p-3 text-center", children: [_jsx(Dumbbell, { className: "h-6 w-6 text-blue-600 mx-auto mb-1" }), _jsx("div", { className: "text-sm text-gray-600", children: "Equipment" }), _jsx("div", { className: "font-semibold", children: exercise.equipment.length })] }), _jsxs("div", { className: "bg-gray-50 rounded-lg p-3 text-center", children: [_jsx(Users, { className: "h-6 w-6 text-purple-600 mx-auto mb-1" }), _jsx("div", { className: "text-sm text-gray-600", children: "Muscles" }), _jsx("div", { className: "font-semibold", children: exercise.targetMuscles.length })] })] }), _jsx("div", { className: "border-b border-gray-200 mb-6", children: _jsx("nav", { className: "-mb-px flex space-x-8", children: [
                                                    { id: 'overview', label: 'Overview', icon: Target },
                                                    { id: 'instructions', label: 'Instructions', icon: Lightbulb },
                                                    { id: 'tips', label: 'Tips & Mistakes', icon: AlertTriangle },
                                                    { id: 'variations', label: 'Variations', icon: Users }
                                                ].map((tab) => {
                                                    const Icon = tab.icon;
                                                    return (_jsxs("button", { onClick: () => setActiveTab(tab.id), className: `py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-1 ${activeTab === tab.id
                                                            ? 'border-green-500 text-green-600'
                                                            : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'}`, children: [_jsx(Icon, { className: "h-4 w-4" }), _jsx("span", { children: tab.label })] }, tab.id));
                                                }) }) }), _jsxs("div", { className: "min-h-[300px]", children: [activeTab === 'overview' && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-3", children: "Target Muscles" }), _jsx("div", { className: "flex flex-wrap gap-2 mb-4", children: exercise.targetMuscles.map((muscle, index) => (_jsx("span", { className: "px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full", children: muscle }, index))) }), exercise.secondaryMuscles.length > 0 && (_jsxs("div", { children: [_jsx("h4", { className: "font-medium text-gray-900 mb-2", children: "Secondary Muscles" }), _jsx("div", { className: "flex flex-wrap gap-2", children: exercise.secondaryMuscles.map((muscle, index) => (_jsx("span", { className: "px-3 py-1 bg-gray-100 text-gray-700 text-sm rounded-full", children: muscle }, index))) })] }))] }), _jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-3", children: "Equipment Required" }), _jsx("div", { className: "flex flex-wrap gap-2", children: exercise.equipment.map((item, index) => (_jsx("span", { className: "px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full", children: item }, index))) })] }), exercise.sets && exercise.sets.length > 0 && (_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-3", children: "Recommended Sets" }), _jsx("div", { className: "bg-gray-50 rounded-lg p-4", children: _jsx("div", { className: "space-y-2", children: exercise.sets.map((set, index) => (_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsxs("span", { className: "font-medium", children: ["Set ", set.setNumber] }), _jsx("span", { className: `px-2 py-1 rounded text-xs font-semibold ${set.setType === 'warm-up' ? 'bg-blue-100 text-blue-800' :
                                                                                                set.setType === 'working' ? 'bg-green-100 text-green-800' :
                                                                                                    'bg-gray-100 text-gray-800'}`, children: set.setType })] }), _jsxs("div", { className: "flex items-center space-x-4 text-sm", children: [_jsxs("span", { children: [set.reps, " reps"] }), set.weight && _jsxs("span", { children: [set.weight, " kg"] }), _jsxs("span", { children: [set.restTime, "s rest"] }), set.rpe && _jsxs("span", { children: ["RPE ", set.rpe] })] })] }, index))) }) })] }))] })), activeTab === 'instructions' && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-3", children: "Step-by-Step Instructions" }), _jsx("ol", { className: "space-y-3", children: exercise.steps.map((step, index) => (_jsxs("li", { className: "flex items-start", children: [_jsx("span", { className: "flex-shrink-0 w-6 h-6 bg-green-100 text-green-800 rounded-full flex items-center justify-center text-sm font-semibold mr-3 mt-0.5", children: index + 1 }), _jsx("span", { className: "text-gray-700", children: step })] }, index))) })] }), exercise.instructions && exercise.instructions.length > 0 && (_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-3", children: "Key Points" }), _jsx("ul", { className: "space-y-2", children: exercise.instructions.map((instruction, index) => (_jsxs("li", { className: "flex items-start", children: [_jsx("span", { className: "text-green-600 mr-2 mt-1", children: "\u2022" }), _jsx("span", { className: "text-gray-700", children: instruction })] }, index))) })] }))] })), activeTab === 'tips' && (_jsxs("div", { className: "space-y-6", children: [_jsxs("div", { children: [_jsxs("h3", { className: "text-lg font-semibold mb-3 flex items-center", children: [_jsx(Lightbulb, { className: "h-5 w-5 text-yellow-600 mr-2" }), "Pro Tips"] }), _jsx("ul", { className: "space-y-2", children: exercise.tips.map((tip, index) => (_jsxs("li", { className: "flex items-start", children: [_jsx("span", { className: "text-yellow-600 mr-2 mt-1", children: "\uD83D\uDCA1" }), _jsx("span", { className: "text-gray-700", children: tip })] }, index))) })] }), _jsxs("div", { children: [_jsxs("h3", { className: "text-lg font-semibold mb-3 flex items-center", children: [_jsx(AlertTriangle, { className: "h-5 w-5 text-red-600 mr-2" }), "Common Mistakes to Avoid"] }), _jsx("ul", { className: "space-y-2", children: exercise.commonMistakes.map((mistake, index) => (_jsxs("li", { className: "flex items-start", children: [_jsx("span", { className: "text-red-600 mr-2 mt-1", children: "\u26A0\uFE0F" }), _jsx("span", { className: "text-gray-700", children: mistake })] }, index))) })] })] })), activeTab === 'variations' && (_jsxs("div", { children: [_jsx("h3", { className: "text-lg font-semibold mb-3", children: "Exercise Variations" }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-3", children: exercise.variations.map((variation, index) => (_jsx("div", { className: "bg-gray-50 rounded-lg p-3", children: _jsx("span", { className: "text-gray-700 font-medium", children: variation }) }, index))) })] }))] })] })] })] })] }) }));
};
export default ExerciseDetailModal;
